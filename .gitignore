# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Django migrations
*/migrations/*
!*/migrations/__init__.py

# Logs
*.log
logs/
debug.log
error.log

# Local environment settings
.env
*.env
/home/yoo__sha.stan/PycharmProjects/pythonProject/venv
# Secret key and credentials
settings.py
settings_local.py

# SQLite database files
*.sqlite3
*__init__.py
# Virtual environment
*venv/
venv
env/
ENV/
*.venv/
.ENV/
# Node.js (if using it for static files)
node_modules/
npm-debug.log
yarn-error.log
db.sqlite3
# Compiled static files (if any)
staticfiles/
static/

# Media files (uploaded by users)
media/

# Backup files
*.bak
*.swp
*.swo
*.orig
# IDEs and editors
.vscode/
.idea/
*.sublime-workspace
*.sublime-project

# macOS-specific
.DS_Store

# Windows-specific
Thumbs.db

# Pytest cache
.pytest_cache/
/awesome_website/awesome_website/__init__.py
/awesome_website/.env
/venv/
/awesome_website/db.sqlite3
/awesome_website/manage.py
/awesome_website/users/__init__.py
/awesome_website/users/migrations/__init__.py

# Byte-compiled / optimized / DLL files

# C extensions


# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/

cover/

# Translations
*.mo
*.pot

# Django stuff:
local_settings.py

db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments

.venv

env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/
# Byte-compiled / optimized / DLL files

# C extensions


# Logs


# Local environment settings

# Secret key and credentials


# SQLite database files
